# üöÄ Modern Angular Chat Application

A beautiful, feature-rich real-time chat application built with Angular, featuring modern UI/UX design with glass morphism effects, real-time messaging, file sharing, and responsive design.

![Chat App Preview](https://via.placeholder.com/800x400/6366f1/ffffff?text=Modern+Chat+App)

## ‚ú® Features

### üé® **Modern UI/UX**
- **Glass Morphism Design** - Translucent backgrounds with backdrop blur effects
- **Gradient Backgrounds** - Beautiful color transitions and modern aesthetics
- **Smooth Animations** - Micro-interactions and transition effects
- **Responsive Design** - Works seamlessly on desktop, tablet, and mobile
- **Dark Mode Ready** - Color variables ready for theme switching
- **Accessibility** - ARIA labels, keyboard navigation, and screen reader support

### üí¨ **Chat Features**
- **Real-time Messaging** - Instant message delivery and reception
- **Message Status** - Sent, delivered, and read indicators
- **Typing Indicators** - Shows when users are typing
- **File Sharing** - Support for images, documents, and various file types
- **Image Preview** - Full-screen image modal with zoom capabilities
- **Emoji Support** - Emoji picker with popular emojis
- **URL Detection** - Automatic link conversion in messages
- **Message Timestamps** - Smart time formatting (relative and absolute)

### üë• **User Management**
- **Contact List** - Beautiful contact sidebar with search functionality
- **Online Status** - Real-time online/offline indicators
- **User Avatars** - Auto-generated avatars with fallback support
- **User Profiles** - Profile viewing capabilities
- **Last Seen** - Shows when users were last active

### ‚ö° **Performance & Technical**
- **Lazy Loading** - Optimized rendering with trackBy functions
- **Optimistic Updates** - Instant UI feedback for better UX
- **Error Handling** - Graceful error handling with user feedback
- **Type Safety** - Full TypeScript implementation with interfaces
- **Service Integration** - Clean separation of concerns with services
- **State Management** - Efficient state handling and persistence

## üõ†Ô∏è Technology Stack

- **Frontend**: Angular 15+ with TypeScript
- **Styling**: SCSS with CSS Variables and Modern CSS Features
- **HTTP Client**: Angular HttpClient for API communication
- **Icons**: Font Awesome 6
- **Authentication**: Token-based authentication
- **Build Tool**: Angular CLI
- **Package Manager**: npm/yarn

## üöÄ Quick Start

### Prerequisites

```bash
- Node.js (v14 or higher)
- Angular CLI (v15 or higher)
- npm or yarn package manager
```

### Installation

1. **Clone or copy the component files**
```bash
# Create component directory
mkdir src/app/components/chat
cd src/app/components/chat
```

2. **Copy the files**
```
src/app/components/chat/
‚îú‚îÄ‚îÄ chat.component.ts
‚îú‚îÄ‚îÄ chat.component.html
‚îú‚îÄ‚îÄ chat.component.scss
‚îî‚îÄ‚îÄ chat.component.spec.ts (optional)
```

3. **Install dependencies**
```bash
npm install @angular/common @angular/core @angular/forms rxjs
```

4. **Add Font Awesome (if not already installed)**
```bash
npm install @fortawesome/fontawesome-free
```

Add to your `angular.json` styles array:
```json
"styles": [
  "node_modules/@fortawesome/fontawesome-free/css/all.css",
  "src/styles.scss"
]
```

### Module Setup

1. **Import in your module** (`app.module.ts` or feature module):

```typescript
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';

import { ChatComponent } from './components/chat/chat.component';

@NgModule({
  declarations: [
    ChatComponent
  ],
  imports: [
    CommonModule,
    FormsModule,
    HttpClientModule
  ],
  providers: [],
  exports: [ChatComponent]
})
export class ChatModule { }
```

2. **Add to your routing** (optional):

```typescript
const routes: Routes = [
  { path: 'chat', component: ChatComponent },
  // ... other routes
];
```

## üìÅ File Structure

```
src/app/components/chat/
‚îú‚îÄ‚îÄ chat.component.ts          # Main component logic
‚îú‚îÄ‚îÄ chat.component.html        # Template with modern UI
‚îú‚îÄ‚îÄ chat.component.scss        # Styles with glass morphism
‚îî‚îÄ‚îÄ interfaces/
    ‚îú‚îÄ‚îÄ contact.interface.ts   # Contact type definitions
    ‚îú‚îÄ‚îÄ message.interface.ts   # Message type definitions
    ‚îî‚îÄ‚îÄ user.interface.ts      # User type definitions
```

## üé® Design System

### Color Variables

The app uses a comprehensive design system with CSS custom properties:

```scss
:root {
  // Primary Colors
  --primary: #6366f1;           // Indigo-500
  --primary-light: #818cf8;     // Indigo-400
  --primary-dark: #4f46e5;      // Indigo-600
  
  // Neutral Colors
  --text-primary: #1f2937;      // Gray-800
  --text-secondary: #6b7280;    // Gray-500
  --text-light: #9ca3af;        // Gray-400
  --border: #e5e7eb;            // Gray-200
  
  // Status Colors
  --success: #10b981;           // Emerald-500
  --warning: #f59e0b;           // Amber-500
  
  // Gradients
  --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  --gradient-secondary: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
  
  // Shadows
  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1);
  --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1);
}
```

### Typography

```scss
// Font Stack
font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;

// Font Weights
--font-normal: 400;
--font-medium: 500;
--font-semibold: 600;
--font-bold: 700;
```

## üîß Configuration

### API Configuration

Update the API endpoints in `chat.component.ts`:

```typescript
// API Base URL
private readonly API_BASE = 'https://your-api-domain.com/api';

// Endpoints
private readonly ENDPOINTS = {
  users: `${this.API_BASE}/users/`,
  messages: `${this.API_BASE}/chat/messages/`,
  upload: `${this.API_BASE}/chat/upload/`
};
```

### Authentication Service

The component expects an `AuthService` with these methods:

```typescript
interface AuthService {
  getCurrentUserId(): number;
  getToken(): string;
  isAuthenticated(): boolean;
}
```

### Environment Variables

```typescript
// src/environments/environment.ts
export const environment = {
  production: false,
  apiUrl: 'https://your-api-domain.com/api',
  uploadMaxSize: 10 * 1024 * 1024, // 10MB
  supportedFileTypes: ['image/*', 'application/pdf', '.doc', '.docx', '.txt']
};
```

## üéØ Usage Examples

### Basic Implementation

```html
<!-- In your template -->
<app-chat></app-chat>
```

### With Custom Configuration

```typescript
// In your component
export class YourComponent {
  chatConfig = {
    allowFileUpload: true,
    maxFileSize: 10 * 1024 * 1024, // 10MB
    autoRefresh: true,
    refreshInterval: 30000, // 30 seconds
    showTypingIndicator: true,
    enableEmoji: true
  };
}
```

```html
<app-chat [config]="chatConfig"></app-chat>
```

### Programmatic Control

```typescript
// Access chat component
@ViewChild(ChatComponent) chatComponent!: ChatComponent;

// Send message programmatically
sendCustomMessage() {
  this.chatComponent.sendMessage('Hello from parent component!');
}

// Select contact programmatically
selectUser(userId: number) {
  const contact = this.chatComponent.contacts.find(c => c.id === userId);
  if (contact) {
    this.chatComponent.selectContact(contact);
  }
}
```

## üé® Customization

### Theming

Create a custom theme by overriding CSS variables:

```scss
// Custom theme example
.chat-app.dark-theme {
  --primary: #8b5cf6;           // Purple theme
  --primary-light: #a78bfa;
  --primary-dark: #7c3aed;
  
  --text-primary: #f9fafb;      // Light text for dark theme
  --text-secondary: #d1d5db;
  --background: #111827;        // Dark background
}
```

### Custom Animations

```scss
// Add custom message animations
.message.slide-in {
  animation: slideInFromRight 0.3s ease-out;
}

@keyframes slideInFromRight {
  from {
    opacity: 0;
    transform: translateX(100px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}
```

### Component Extensions

```typescript
// Extend the chat component
export class CustomChatComponent extends ChatComponent {
  
  // Add custom methods
  sendGif(gifUrl: string) {
    const gifMessage: Message = {
      id: Date.now(),
      image: gifUrl,
      fromMe: true,
      time: new Date().toISOString(),
      isNew: true
    };
    
    this.messages.push(gifMessage);
    this.shouldScrollToBottom = true;
  }
  
  // Override existing methods
  override formatMessage(text: string): string {
    // Add custom formatting (mentions, hashtags, etc.)
    let formatted = super.formatMessage(text);
    
    // Add mention highlighting
    formatted = formatted.replace(/@(\w+)/g, '<span class="mention">@$1</span>');
    
    // Add hashtag highlighting
    formatted = formatted.replace(/#(\w+)/g, '<span class="hashtag">#$1</span>');
    
    return formatted;
  }
}
```

## üì± Responsive Behavior

The chat app is fully responsive with breakpoints:

```scss
// Breakpoints
$mobile: 768px;
$tablet: 1024px;
$desktop: 1200px;

// Mobile (< 768px)
- Sidebar becomes full-screen overlay
- Single column layout
- Touch-optimized interactions
- Compact message bubbles

// Tablet (768px - 1024px)
- Reduced sidebar width
- Optimized touch targets
- Preserved dual-pane layout

// Desktop (> 1024px)
- Full feature set
- Hover interactions
- Multi-column layout
- Enhanced animations
```

## üîå API Integration

### Expected API Endpoints

#### 1. Get Users/Contacts
```
GET /api/users/
Authorization: Token <your-token>

Response:
{
  "results": [
    {
      "id": 1,
      "username": "john_doe",
      "first_name": "John",
      "last_name": "Doe",
      "email": "john@example.com",
      "is_online": true,
      "last_seen": "2024-01-15T10:30:00Z"
    }
  ]
}
```

#### 2. Get Messages
```
GET /api/chat/messages/?user=<user_id>
Authorization: Token <your-token>

Response:
{
  "results": [
    {
      "id": 1,
      "sender": 1,
      "receiver": 2,
      "content": "Hello there!",
      "timestamp": "2024-01-15T10:30:00Z",
      "read_at": null,
      "delivered_at": "2024-01-15T10:30:01Z"
    }
  ]
}
```

#### 3. Send Message
```
POST /api/chat/messages/
Authorization: Token <your-token>
Content-Type: application/json

Body:
{
  "receiver": 2,
  "content": "Hello there!"
}

Response:
{
  "id": 1,
  "sender": 1,
  "receiver": 2,
  "content": "Hello there!",
  "timestamp": "2024-01-15T10:30:00Z",
  "read_at": null,
  "delivered_at": null
}
```

#### 4. File Upload (Optional)
```
POST /api/chat/upload/
Authorization: Token <your-token>
Content-Type: multipart/form-data

Body: FormData with file

Response:
{
  "id": 1,
  "file_url": "https://example.com/uploads/file.jpg",
  "file_name": "image.jpg",
  "file_size": 1024,
  "file_type": "image/jpeg"
}
```

## üß™ Testing

### Unit Tests

```typescript
// chat.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { HttpClientTestingModule } from '@angular/common/http/testing';
import { FormsModule } from '@angular/forms';

import { ChatComponent } from './chat.component';
import { AuthService } from '../../shared/services/auth.service';

describe('ChatComponent', () => {
  let component: ChatComponent;
  let fixture: ComponentFixture<ChatComponent>;
  let mockAuthService: jasmine.SpyObj<AuthService>;

  beforeEach(async () => {
    const spy = jasmine.createSpyObj('AuthService', ['getCurrentUserId', 'getToken']);

    await TestBed.configureTestingModule({
      declarations: [ChatComponent],
      imports: [HttpClientTestingModule, FormsModule],
      providers: [
        { provide: AuthService, useValue: spy }
      ]
    }).compileComponents();

    fixture = TestBed.createComponent(ChatComponent);
    component = fixture.componentInstance;
    mockAuthService = TestBed.inject(AuthService) as jasmine.SpyObj<AuthService>;
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should load contacts on init', () => {
    mockAuthService.getCurrentUserId.and.returnValue(1);
    mockAuthService.getToken.and.returnValue('test-token');
    
    component.ngOnInit();
    
    expect(component.currentUserId).toBe(1);
  });

  it('should send message when form is valid', () => {
    component.selectedContact = { id: 2, name: 'Test User' };
    component.newMessage = 'Test message';
    
    spyOn(component, 'sendMessage');
    component.sendMessage();
    
    expect(component.sendMessage).toHaveBeenCalled();
  });
});
```

### E2E Tests

```typescript
// chat.e2e-spec.ts
import { browser, by, element } from 'protractor';

describe('Chat App', () => {
  beforeEach(() => {
    browser.get('/chat');
  });

  it('should display chat interface', () => {
    expect(element(by.css('.chat-app')).isPresent()).toBe(true);
  });

  it('should allow sending messages', () => {
    const messageInput = element(by.css('input[type="text"]'));
    const sendButton = element(by.css('.send-btn'));
    
    messageInput.sendKeys('Test message');
    sendButton.click();
    
    expect(element(by.css('.message.from-me')).getText()).toContain('Test message');
  });
});
```

## üöÄ Performance Optimization

### Lazy Loading

```typescript
// Implement lazy loading for large contact lists
@Component({
  // ...
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ChatComponent implements OnInit {
  
  @Input() virtualScrolling = true;
  
  // Use virtual scrolling for large message lists
  trackByMessage = (index: number, message: Message) => message.id;
  
  // Implement pagination
  loadMoreMessages() {
    if (this.hasMoreMessages && !this.isLoading) {
      this.loadMessages(this.selectedContact.id, this.currentPage + 1);
    }
  }
}
```

### Memory Management

```typescript
// Proper cleanup in ngOnDestroy
ngOnDestroy(): void {
  // Clean up subscriptions
  this.subscriptions.forEach(sub => sub.unsubscribe());
  
  // Clean up object URLs for file uploads
  this.messages.forEach(message => {
    if (message.file?.url.startsWith('blob:')) {
      URL.revokeObjectURL(message.file.url);
    }
  });
  
  // Clear timers
  if (this.refreshTimer) {
    clearInterval(this.refreshTimer);
  }
}
```

## üõ°Ô∏è Security Considerations

### Input Sanitization

```typescript
// Sanitize user input
import { DomSanitizer } from '@angular/platform-browser';

constructor(private sanitizer: DomSanitizer) {}

sanitizeMessage(message: string): string {
  // Remove potentially dangerous HTML
  return this.sanitizer.sanitize(SecurityContext.HTML, message) || '';
}
```

### File Upload Security

```typescript
// Validate file types and sizes
private validateFile(file: File): boolean {
  const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf'];
  const maxSize = 10 * 1024 * 1024; // 10MB
  
  if (!allowedTypes.includes(file.type)) {
    this.showError('File type not allowed');
    return false;
  }
  
  if (file.size > maxSize) {
    this.showError('File too large');
    return false;
  }
  
  return true;
}
```

### XSS Prevention

```html
<!-- Use Angular's built-in sanitization -->
<div [innerHTML]="sanitizeMessage(message.text)"></div>

<!-- Or use text interpolation for plain text -->
<div>{{ message.text }}</div>
```

## üåê Internationalization (i18n)

### Setup i18n

```bash
ng add @angular/localize
ng extract-i18n
```

### Add translations

```html
<!-- Mark text for translation -->
<h3 i18n="@@chat.messages.title">Messages</h3>
<input i18n-placeholder="@@chat.input.placeholder" placeholder="Type your message...">
```

### Translation files

```json
// messages.en.json
{
  "chat.messages.title": "Messages",
  "chat.input.placeholder": "Type your message...",
  "chat.status.online": "Online",
  "chat.status.offline": "Offline"
}

// messages.es.json
{
  "chat.messages.title": "Mensajes",
  "chat.input.placeholder": "Escribe tu mensaje...",
  "chat.status.online": "En l√≠nea",
  "chat.status.offline": "Desconectado"
}
```

## üêõ Troubleshooting

### Common Issues

#### 1. Messages not loading
```typescript
// Check authentication
if (!this.authService.getToken()) {
  console.error('No authentication token found');
  // Redirect to login
}

// Check API endpoint
console.log('API URL:', this.apiUrl);

// Check CORS settings
// Ensure your backend allows requests from your frontend domain
```

#### 2. File uploads failing
```typescript
// Check file size limits
if (file.size > this.maxFileSize) {
  console.error('File too large:', file.size);
}

// Check file type
if (!this.allowedTypes.includes(file.type)) {
  console.error('File type not allowed:', file.type);
}

// Check backend upload limits
// Ensure your server accepts multipart/form-data
```

#### 3. Styling issues
```scss
// Check CSS variable support
:root {
  --primary: #6366f1; /* Fallback for older browsers */
}

// Check browser compatibility
@supports (backdrop-filter: blur(10px)) {
  .glass-effect {
    backdrop-filter: blur(10px);
  }
}
```

#### 4. Performance issues
```typescript
// Enable OnPush change detection
@Component({
  changeDetection: ChangeDetectionStrategy.OnPush
})

// Use trackBy functions
trackByContactId = (index: number, contact: Contact) => contact.id;

// Implement virtual scrolling for large lists
```

### Debug Mode

```typescript
// Enable debug mode
export class ChatComponent {
  private debug = environment.production === false;
  
  private log(...args: any[]) {
    if (this.debug) {
      console.log('[ChatComponent]', ...args);
    }
  }
  
  sendMessage() {
    this.log('Sending message:', this.newMessage);
    // ... rest of method
  }
}
```

## üìö Additional Resources

### Documentation Links
- [Angular Official Docs](https://angular.io/docs)
- [RxJS Documentation](https://rxjs.dev/)
- [Font Awesome Icons](https://fontawesome.com/icons)
- [CSS Grid Guide](https://css-tricks.com/snippets/css/complete-guide-grid/)
- [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)

### Recommended Libraries
- **@angular/cdk** - Component Dev Kit for advanced UI components
- **ngx-socket-io** - WebSocket integration for real-time features
- **ng-image-slider** - Image carousel for message galleries
- **ngx-emoji-mart** - Advanced emoji picker
- **ngx-infinite-scroll** - Infinite scrolling for message history

### Design Inspiration
- [Dribbble Chat Designs](https://dribbble.com/search/chat-app)
- [Material Design Guidelines](https://material.io/design)
- [Apple Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines/)

## üìÑ License

This project is licensed under the MIT License - see the LICENSE file for details.

## ü§ù Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## üìû Support

For support and questions:
- Create an issue in the repository
- Contact the development team
- Check the troubleshooting section above

---

**Built with ‚ù§Ô∏è using Angular and modern web technologies**